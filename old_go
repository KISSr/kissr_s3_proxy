package main

import (
  "io"
  "mime"
  "net/http"
  "os"
  "path/filepath"
  "strings"

  "github.com/aws/aws-sdk-go/aws"
  "github.com/aws/aws-sdk-go/aws/session"
  "github.com/aws/aws-sdk-go/service/s3"
  "github.com/aws/aws-sdk-go/service/s3/s3manager"
  "github.com/joho/godotenv"
)

func getHost(r *http.Request) string {
  host := r.Host

  if host == "localhost:8080" {
    host = "test123.kissr.com"
  }

  return host
}

func getPath(r *http.Request) string {
  path := r.URL.Path

  if strings.HasSuffix(path, "/") {
    path = path + "index.html"
  }

  return path
}

func setContentType(w http.ResponseWriter, path string) {
  w.Header().Set("Content-Type", mime.TypeByExtension(filepath.Ext(path)))
}

func streamFromS3(key string, w io.Writer) {
  downloader := s3manager.NewDownloader(session.New(&aws.Config{}))
  wb := &aws.WriteAtBuffer{}
  _, err := downloader.Download(wb,
    &s3.GetObjectInput{
      Bucket: aws.String(os.Getenv("AWS_BUCKET")),
      Key:    aws.String(key),
    })
  if err != nil {
    return
  }
  w.Write(wb.Bytes())
}

type httpHandler struct{}

func (th *httpHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
  host := getHost(r)
  path := getPath(r)
  setContentType(w, path)
  streamFromS3(host+path, w)
}

func main() {
  _ = godotenv.Load()

  http.ListenAndServe(":8080", &httpHandler{})
}
